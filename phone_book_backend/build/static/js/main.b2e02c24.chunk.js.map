{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/Person.js","services/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","searchWord","handleFilter","value","onChange","App","onAddNewPerson","useState","newName","setNewName","newPhoneNumber","setNewPhoneNumber","onSubmit","event","preventDefault","name","number","alert","target","type","Persons","data","onDelete","map","person","key","id","onClick","axios","get","then","response","newObject","post","put","delete","Notification","message","className","persons","setPersons","filterValue","setFilterValue","errorMessage","setErrorMessage","useEffect","getAll","personService","console","log","showPersons","filter","includes","PersonForm","newPerson","existPerson","find","toLowerCase","window","confirm","concat","res","catch","error","setTimeout","p","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2e02c24.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({searchWord, handleFilter}) => {\n  return (\n    <div>\n      Filter with: <input value={searchWord} onChange={handleFilter}/>\n    </div>\n  )\n}\n\nexport default Filter;\n","import React, { useState } from 'react'\n\nconst App = ({onAddNewPerson}) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newPhoneNumber, setNewPhoneNumber ] = useState('')\n\n  const submit = (event) => {\n    event.preventDefault()\n    if (!newName || !newPhoneNumber) {\n      alert(`please enter name and number!`);\n    }else {\n      const newPerson = {\n        name: newName,\n        number: newPhoneNumber\n      }\n  \n      onAddNewPerson(newPerson)\n      setNewName('');\n      setNewPhoneNumber('');\n    }\n  }\n\n  const handleChangeNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleChangeNewPhoneNumber = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          name: <input value={newName} onChange={handleChangeNewName}/>\n        </div>\n        <div>\n          phone number: <input value={newPhoneNumber} onChange={handleChangeNewPhoneNumber} type=\"number\"/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\n\nconst Persons = ({data, onDelete}) => {\n\n  return (\n    <div>\n      {\n        data.map((person) =>\n          <div  key={person.id}>\n            {person.name}:  {person.number}\n            <button onClick={() => onDelete(person)}>Delete</button>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Persons;\n","import axios from 'axios'\nconst baseUrl = '/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/Person'\nimport Notification from './services/Notification'\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ filterValue, setFilterValue ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  useEffect(() => {\n    getAll();\n  }, [])\n\n  const getAll = () => {\n    personService\n      .getAll()\n      .then(response => {\n        console.log(response)\n        setPersons(response)\n      })\n  }\n\n  const addNewPerson = (newPerson) => {\n    const existPerson = persons.find(person => person.name.toLowerCase() === newPerson.name.toLowerCase())\n    console.log(existPerson);\n    if (!existPerson){\n      personService\n        .create(newPerson)\n        .then(response => {\n          setPersons(persons.concat(response));\n          alert(`${response.name} is added to phonebooks`);\n          setFilterValue('');\n        })\n    } else {\n      const ok = window.confirm(`${newPerson.name} is alredy added. Do you want to replace old number?`);\n      if (ok) {\n        personService\n        .update(existPerson.id, newPerson)\n        .then(() => {\n          getAll();\n          setFilterValue('');\n        })\n      }\n    }\n  }\n\n  const deletePerson = (person) => {\n    const ok = window.confirm(`Delete ${person.name} ?`);\n    if(ok) {\n      personService\n        .remove(person.id)\n        .then(res => {\n          console.log(res)\n          getAll();\n        })\n        .catch(error => {\n          setErrorMessage(\n            `'${person.name}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 2000)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  const handleChangeFilterValue = (event) => {\n    setFilterValue(event.target.value)\n  }\n  const showPersons = persons.filter(person => person.name.includes(filterValue))\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} />\n\n      <Filter searchWord={filterValue} handleFilter={handleChangeFilterValue} />\n      <h1>Add a new</h1>\n      <PersonForm onAddNewPerson={addNewPerson} />\n      <Persons data={showPersons} onDelete={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}